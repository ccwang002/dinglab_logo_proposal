# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-09-25 15:18
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import reviews.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('proposals', '0002_auto_20160925_1501'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('significance', reviews.models.ReviewScoreField(blank=True, help_text='Symbolize key characteristics of the lab. Inspiration. Simple but meaningful.', null=True, validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1)])),
                ('innovation', reviews.models.ReviewScoreField(blank=True, help_text='Original but not at the expense of the message. Unique but not odd. Creative but not ugly.', null=True, validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1)])),
                ('approach', reviews.models.ReviewScoreField(blank=True, help_text='The use of color, shape, pattern, and pictures. Is it captivating and easy on your eyes?', null=True, validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1)])),
                ('investigator', reviews.models.ReviewScoreField(blank=True, help_text='NIH evaluates investigators to gauge the chance of getting the proposed products. We are evaluating the finished products. So, what is the point?!', null=True, validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1)])),
                ('environment', reviews.models.ReviewScoreField(blank=True, default=1, help_text='Nothing. Give 1 to everyone.', null=True, validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1)])),
                ('overall_impact', reviews.models.ReviewScoreField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(1)])),
                ('comment', models.TextField(blank=True, null=True)),
                ('comment_disclosure', models.BooleanField(default=True, help_text='Whether the comment is disclosed to the submitter.')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='proposals.LogoProposal')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
